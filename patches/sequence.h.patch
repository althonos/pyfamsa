diff --git a/src/core/sequence.h b/src/core/sequence.h
index 66c32cc..73e5f4f 100644
--- a/src/core/sequence.h
+++ b/src/core/sequence.h
@@ -22,16 +22,16 @@ using namespace refresh;
 // *******************************************************************
 class CSequence
 {
+public:
 	static char mapping_table[25];
 
-public:
 	uint32_t length;
 	uint32_t data_size;
 	symbol_t* data = nullptr;
 	bit_vec_t *p_bit_masks;
 	uint32_t p_bv_len;
 
-	const int original_no;
+	int original_no;
 	int sequence_no;
 	string id;
 
@@ -41,15 +41,15 @@ public:
 	vector<std::pair<int, char>> extra_symbols;
 	
 public:
-	CSequence() = delete;
-	CSequence(const string& _id, const string& seq, int sequence_no = -1, memory_monotonic_safe *mma = nullptr);
+	CSequence();
+	CSequence(const string& _id, const std::string_view& seq, int sequence_no = -1, memory_monotonic_safe *mma = nullptr);
 	
 	// sequences are not copyable
-	CSequence(const CSequence& x) noexcept = delete;
+	CSequence(const CSequence& x);
 	CSequence& operator=(const CSequence& x) noexcept = delete;
 
 	CSequence(CSequence&& x) noexcept;
-	CSequence& operator=(CSequence&& x) noexcept = delete; 
+	CSequence& operator=(CSequence&& x) noexcept; 
 	
 	~CSequence();
 	
@@ -102,7 +102,7 @@ public:
 	vector<std::pair<int, char>> extra_symbols;
 
 	CGappedSequence() = delete;
-	CGappedSequence(const string& _id, const string& seq, int seq_no=-1, memory_monotonic_safe *mma=nullptr);
+	CGappedSequence(const string& _id, const std::string_view& seq, int seq_no=-1, memory_monotonic_safe *mma=nullptr);
     CGappedSequence(CSequence &&_sequence);
     CGappedSequence(const CGappedSequence &_gapped_sequence);
     CGappedSequence(CGappedSequence &&_gapped_sequence) noexcept;
