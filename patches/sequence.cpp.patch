@@ -19,6 +19,18 @@
 
 
 // *******************************************************************
+CSequence::CSequence()
+	:
+	length(0),
+	data_size(0),
+	data(nullptr),
+	p_bit_masks(nullptr),
+	p_bv_len(0),
+	original_no(-1),
+	sequence_no(-1),
+	mma(nullptr)
+{}
+
 CSequence::CSequence(const string& _id, const string& seq, int sequence_no, memory_monotonic_safe* mma)
 	: 
 	length(0), 
@@ -79,6 +89,39 @@
 	}
 }
 
+// *******************************************************************
+CSequence::CSequence(const CSequence& x)
+{
+	length = x.length;
+	data_size = x.data_size;
+	sequence_no = x.sequence_no;
+	original_no = x.original_no;
+	mma = x.mma;
+	id = x.id;
+	uppercase = x.uppercase;
+	p_bv_len = x.p_bv_len;
+
+	if (length)
+	{
+		if (mma)
+			data = (symbol_t*)mma->allocate(data_size + 1);
+		else
+			data = new symbol_t[data_size + 1];
+		copy_n(x.data, data_size, data);
+	}
+	else
+		data = nullptr;
+
+	if (p_bv_len)
+	{
+			p_bit_masks = new bit_vec_t[p_bv_len * NO_SYMBOLS];
+			copy_n(p_bit_masks, p_bv_len, x.p_bit_masks);
+	}
+	else
+		p_bit_masks = nullptr;
+
+}
+
 // *******************************************************************
 CSequence::CSequence(CSequence&& x) noexcept 
 	:
@@ -105,10 +105,11 @@
 
 
 // *******************************************************************
-/*
+
 CSequence& CSequence::operator=(CSequence&& x) noexcept
 {
 	this->sequence_no = move(x.sequence_no);
+	this->original_no = move(x.original_no);
 	this->length = move(x.length);
 	this->id = move(x.id);
 
@@ -127,7 +128,7 @@
 
 	return *this;
 }
-*/
+
 
 // *******************************************************************
 CSequence::~CSequence()
